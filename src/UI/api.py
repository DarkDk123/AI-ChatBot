import json
import logging
import os
import re

import httpx

OSHO_API_URL = os.getenv("OSHO_API_URL", "http://localhost:8001")


logger = logging.getLogger(__name__)

OSHO_API_URL = os.getenv("OSHO_API_URL", "http://localhost:8001")

client = httpx.AsyncClient(base_url=OSHO_API_URL)


async def create_thread(user_id: str) -> str:
    """
    Create a new conversation thread.

    Parameters:
    ----------
    user_id : str
        The user ID to associate with this thread

    Returns:
    -------
    str
        The thread ID created
    """
    logger.info(f"Creating new thread for user {user_id}")
    response = await client.get("/create_thread", params={"user_id": user_id})
    response.raise_for_status()
    return response.json()["thread_id"]


async def generate_response(prompt: str, thread_id: str, user_id: str):
    """
    Generate the response to a user's prompt.

    Parameters:
    ----------
    prompt : str
        The user's prompt
    thread_id : str
        The ID of the conversation thread
    user_id : str
        The user ID associated with this thread

    Returns:
    -------
    str
        The response generated by the model
    """
    logger.info(f"Generating response to prompt '{prompt}' in thread {thread_id}")
    payload = {
        "messages": [{"role": "user", "content": prompt}],
        "thread_id": thread_id,
        "user_id": user_id,
    }

    async with client.stream("post", "/generate", json=payload) as response:
        response.raise_for_status()

        full_response = ""

        # Stream the response
        async for chunk in response.aiter_lines():
            if chunk:
                chunk = chunk.decode("utf-8")  # type: ignore
                fix = re.sub(r"'([^\"']*)'", r'"\1"', chunk).strip()
                print(fix)
                decoded_chunk = json.loads(s=fix)
                content = decoded_chunk["choices"][0]["message"]["content"]
                full_response += content

                yield content

    yield ""


async def get_thread_info(thread_id: str):
    """
    Get the information about a conversation thread.

    Parameters:
    ----------
    thread_id : str
        The ID of the conversation thread

    Returns:
    -------
    dict
        The information about the thread
    """
    logger.info(f"Fetching information for thread {thread_id}")
    response = await client.get("/get_thread_info", params={"thread_id": thread_id})
    response.raise_for_status()
    return response.json()


async def delete_thread(thread_id: str):
    """
    Delete a conversation thread.

    Parameters:
    ----------
    thread_id : str
        The ID of the conversation thread
    """
    logger.info(f"Deleting thread {thread_id}")
    response = await client.delete("/delete_thread", params={"thread_id": thread_id})

    response.raise_for_status()
    return response.json()


async def healthz():
    """Health Check ChatBot API Server."""
    response = await client.get("/healthz")
    response.raise_for_status()

    logger.info("ChatBot API Server is healthy")
    return response.json()
